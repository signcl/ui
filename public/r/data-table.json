{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "description": "Data table component",
  "registryDependencies": [
    "button",
    "dropdown",
    "input",
    "table"
  ],
  "files": [
    {
      "path": "components/ui/data-table.tsx",
      "content": "'use client'\n\nimport { IconArrowDown, IconArrowUp, IconFilter, IconX } from '@tabler/icons-react'\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  type SortingState,\n  type TableOptions,\n  useReactTable,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport * as React from 'react'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown'\nimport { Input } from '@/components/ui/input'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  filterColumn?: string\n  filterPlaceholder?: string\n  options?: Partial<TableOptions<TData>>\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  filterColumn,\n  filterPlaceholder = 'Filter...',\n  options,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n    ...options,\n  })\n\n  return (\n    <div className='w-full'>\n      <div className='flex items-center justify-between py-4'>\n        {filterColumn && (\n          <div className='flex items-center gap-2'>\n            <Input\n              placeholder={filterPlaceholder}\n              value={(table.getColumn(filterColumn)?.getFilterValue() as string) ?? ''}\n              onChange={event => table.getColumn(filterColumn)?.setFilterValue(event.target.value)}\n              className='max-w-sm'\n            />\n            {!!table.getColumn(filterColumn)?.getFilterValue() && (\n              <Button variant='link' onClick={() => table.getColumn(filterColumn)?.setFilterValue('')}>\n                <IconX className='h-4 w-4' />\n              </Button>\n            )}\n          </div>\n        )}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <div>\n              <Button variant='outline' tint='default'>\n                <IconFilter className='h-4 w-4' />\n                Columns\n              </Button>\n            </div>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align='end'>\n            {table\n              .getAllColumns()\n              .filter(column => column.getCanHide())\n              .map(column => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className='capitalize'\n                    checked={column.getIsVisible()}\n                    onCheckedChange={value => column.toggleVisibility(!!value)}\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className='border-fg/10 rounded-md border'>\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map(headerGroup => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map(header => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map(row => (\n                <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\n                  {row.getVisibleCells().map(cell => (\n                    <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className='h-24 text-center'>\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className='flex items-center justify-end space-x-2 py-4'>\n        <div className='text-fg/60 flex-1 text-sm'>\n          {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length} row(s)\n          selected.\n        </div>\n        <div className='space-x-2'>\n          <Button variant='outline' onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>\n            Previous\n          </Button>\n          <Button variant='outline' onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Helper function to create a sortable header component\nexport function getSortableHeader(header: string): React.FC<{\n  column: {\n    getCanSort: () => boolean\n    getIsSorted: () => false | 'asc' | 'desc'\n    toggleSorting: (descending?: boolean) => void\n  }\n}> {\n  return function SortableHeader({ column }) {\n    return (\n      <Button\n        variant='link'\n        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n        className='flex h-auto items-center gap-x-1 p-0'\n      >\n        {header}\n        {column.getIsSorted() === 'asc' ? (\n          <IconArrowUp className='h-4 w-4' />\n        ) : column.getIsSorted() === 'desc' ? (\n          <IconArrowDown className='h-4 w-4' />\n        ) : null}\n      </Button>\n    )\n  }\n}\n",
      "type": "registry:component"
    }
  ]
}