{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-form",
  "type": "registry:component",
  "title": "Example Form",
  "description": "A contact form with Zod validation.",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "textarea",
    "card"
  ],
  "files": [
    {
      "path": "components/blocks/example-form/example-form.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { z } from 'zod'\n\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\n\nconst exampleFormSchema = z.object({\n  name: z.string().min(1),\n  email: z.string().email(),\n  message: z.string().min(1),\n})\n\nexport function ExampleForm() {\n  const [pending, setPending] = React.useState(false)\n  const [state, setState] = React.useState({\n    defaultValues: {\n      name: '',\n      email: '',\n      message: '',\n    },\n    success: false,\n    errors: {\n      name: '',\n      email: '',\n      message: '',\n    },\n  })\n\n  const handleSubmit = React.useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault()\n      setPending(true)\n\n      const formData = new FormData(e.target as HTMLFormElement)\n      const data = Object.fromEntries(formData.entries())\n      const result = exampleFormSchema.safeParse(data)\n\n      if (!result.success) {\n        setState({\n          ...state,\n          errors: Object.fromEntries(\n            Object.entries(result.error.flatten().fieldErrors).map(([key, value]) => [key, value?.[0] ?? ''])\n          ) as Record<keyof typeof state.errors, string>,\n        })\n        setPending(false)\n        return\n      }\n\n      setPending(false)\n    },\n    [state]\n  )\n\n  return (\n    <form onSubmit={handleSubmit} className='w-full max-w-sm'>\n      <Card>\n        <CardHeader>\n          <CardTitle>How can we help?</CardTitle>\n          <CardDescription>Need help with your project? We&apos;re here to assist you.</CardDescription>\n        </CardHeader>\n        <CardContent className='flex flex-col gap-6'>\n          <div className='group/field grid gap-2' data-invalid={!!state.errors?.name}>\n            <Label htmlFor='name' className='group-data-[invalid=true]/field:text-rose-500'>\n              Name <span aria-hidden='true'>*</span>\n            </Label>\n            <Input\n              id='name'\n              name='name'\n              placeholder='Lee Robinson'\n              className='group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive'\n              disabled={pending}\n              aria-invalid={!!state.errors?.name}\n              aria-errormessage='error-name'\n              defaultValue={state.defaultValues.name}\n            />\n            {state.errors?.name && (\n              <p id='error-name' className='text-rose-500 text-sm'>\n                {state.errors.name}\n              </p>\n            )}\n          </div>\n          <div className='group/field grid gap-2' data-invalid={!!state.errors?.email}>\n            <Label htmlFor='email' className='group-data-[invalid=true]/field:text-rose-500'>\n              Email <span aria-hidden='true'>*</span>\n            </Label>\n            <Input\n              id='email'\n              name='email'\n              placeholder='leerob@acme.com'\n              className='group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive'\n              disabled={pending}\n              aria-invalid={!!state.errors?.email}\n              aria-errormessage='error-email'\n              defaultValue={state.defaultValues.email}\n            />\n            {state.errors?.email && (\n              <p id='error-email' className='text-rose-500 text-sm'>\n                {state.errors.email}\n              </p>\n            )}\n          </div>\n          <div className='group/field grid gap-2' data-invalid={!!state.errors?.message}>\n            <Label htmlFor='message' className='group-data-[invalid=true]/field:text-rose-500'>\n              Message <span aria-hidden='true'>*</span>\n            </Label>\n            <Textarea\n              id='message'\n              name='message'\n              placeholder='Type your message here...'\n              className='group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive'\n              disabled={pending}\n              aria-invalid={!!state.errors?.message}\n              aria-errormessage='error-message'\n              defaultValue={state.defaultValues.message}\n            />\n            {state.errors?.message && (\n              <p id='error-message' className='text-rose-500 text-sm'>\n                {state.errors.message}\n              </p>\n            )}\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type='submit' disabled={pending}>\n            {pending ? 'Sending...' : 'Send Message'}\n          </Button>\n        </CardFooter>\n      </Card>\n    </form>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "demo"
    ]
  }
}