{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scroll-area",
  "type": "registry:component",
  "title": "Scroll Area",
  "description": "Scroll area component",
  "files": [
    {
      "path": "components/ui/scroll-area.tsx",
      "content": "'use client'\n\nimport * as RadixScrollArea from '@radix-ui/react-scroll-area'\n// Migrated and modifed from Mantine v6 and shadcn ScrollArea component\n// https://github.com/mantinedev/mantine/tree/v6/src/mantine-core/src/ScrollArea\n// https://ui.shadcn.com/docs/components/scroll-area\nimport type React from 'react'\n\nimport { cn } from '@/lib/cn'\n\nexport interface ScrollAreaProps extends React.ComponentProps<typeof RadixScrollArea.Root> {\n  /** Scrollbar size in pixels */\n  scrollbarSize?: number\n\n  /** Should scrollbars be hidden */\n  hideScrollbar?: boolean\n\n  /** Should scrollbars be offset with padding */\n  offsetScrollbars?: boolean\n\n  /** Get viewport ref */\n  viewportRef?: React.ForwardedRef<React.ComponentRef<typeof RadixScrollArea.Viewport>>\n\n  /** Props added to the viewport element */\n  // viewportProps?: React.ComponentPropsWithRef<'div'>\n  viewportProps?: React.ComponentPropsWithRef<typeof RadixScrollArea.Viewport>\n\n  /** Subscribe to scroll position changes */\n  onScrollPositionChange?(position: { x: number; y: number }): void\n}\n\nfunction ScrollArea({\n  className,\n  children,\n  scrollbarSize = 8,\n  hideScrollbar = false,\n  offsetScrollbars = false,\n  viewportRef,\n  viewportProps,\n  onScrollPositionChange,\n  ...props\n}: ScrollAreaProps) {\n  const { className: viewportClassName, ...restViewportProps } = viewportProps || {}\n\n  return (\n    <RadixScrollArea.Root\n      data-slot='scroll-area'\n      className={cn('relative overflow-hidden', className)}\n      style={{ '--scrollbar-size': `${scrollbarSize}px` } as React.CSSProperties}\n      {...props}\n    >\n      <RadixScrollArea.Viewport\n        ref={viewportRef}\n        className={cn(\n          'scroll-area focus-visible:outline-ac/20 size-full',\n          // https://github.com/radix-ui/primitives/issues/926\n          '[&>div]:block!',\n          offsetScrollbars && {\n            'pr-(--scrollbar-size)': true,\n            'pb-(--scrollbar-size)': true,\n          },\n          viewportClassName\n        )}\n        onScroll={\n          typeof onScrollPositionChange === 'function'\n            ? ({ currentTarget }) =>\n                onScrollPositionChange({\n                  x: currentTarget.scrollLeft,\n                  y: currentTarget.scrollTop,\n                })\n            : undefined\n        }\n        {...restViewportProps}\n      >\n        {children}\n      </RadixScrollArea.Viewport>\n\n      {!hideScrollbar && <ScrollBar />}\n\n      {/* scrollbar background is transparent by default, so no needs for this component */}\n      <RadixScrollArea.Corner />\n    </RadixScrollArea.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof RadixScrollArea.ScrollAreaScrollbar>) {\n  return (\n    <RadixScrollArea.ScrollAreaScrollbar\n      data-slot='scroll-area-scrollbar'\n      orientation={orientation}\n      className={cn(\n        'bg-fg/0 hover:bg-fg/5 flex touch-none p-[1px] transition-colors select-none',\n        orientation === 'vertical' && 'h-full w-[var(--scrollbar-size,_8px)] border-l border-l-transparent',\n        orientation === 'horizontal' && 'h-[var(--scrollbar-size,_8px)] flex-col border-t border-t-transparent',\n        className\n      )}\n      {...props}\n    >\n      <RadixScrollArea.ScrollAreaThumb\n        data-slot='scroll-area-thumb'\n        className={cn(\n          'bg-fg/40 hover:bg-fg/80 relative flex-1 rounded-full',\n          'before:absolute before:top-1/2 before:left-1/2 before:size-full before:min-h-6 before:min-w-6 before:-translate-x-1/2 before:-translate-y-1/2'\n        )}\n      />\n    </RadixScrollArea.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ]
}