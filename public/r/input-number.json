{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-number",
  "type": "registry:component",
  "title": "Input Number",
  "description": "Number input component with controls",
  "registryDependencies": [
    "button",
    "input-group",
    "input-next",
    "popover"
  ],
  "files": [
    {
      "path": "components/ui/input-number.tsx",
      "content": "'use client'\n\nimport { IconAdjustments, IconAdjustmentsCog, IconChevronDown, IconChevronUp, IconRestore } from '@tabler/icons-react'\nimport type * as React from 'react'\n\nimport { Button } from '@/components/ui/button'\nimport { InputGroup, InputGroupAddon, InputGroupButton, InputGroupInput } from '@/components/ui/input-group'\nimport { Input, type InputProps } from '@/components/ui/input-next'\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\n\nexport interface InputNumberProps extends Omit<InputProps, 'type'> {\n  /** Hide number controls */\n  hideControls?: boolean\n  /** Step interval for number inputs */\n  step?: number\n  /** Min value for number inputs */\n  min?: number\n  /** Max value for number inputs */\n  max?: number\n  /** onChange handler */\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void\n  /** Current value */\n  value?: number | string\n  /** Default value for reset functionality */\n  defaultValue?: number | string\n}\n\nfunction InputNumber({\n  className,\n  hideControls,\n  step = 1,\n  min,\n  max,\n  onChange,\n  disabled,\n  value,\n  defaultValue,\n  inputSize,\n  ...props\n}: InputNumberProps) {\n  const triggerChange = (newValue: number) => {\n    if (disabled) return\n\n    if (onChange) {\n      onChange({\n        target: { value: newValue.toString(), valueAsNumber: newValue },\n        currentTarget: { value: newValue.toString(), valueAsNumber: newValue },\n      } as React.ChangeEvent<HTMLInputElement>)\n    }\n  }\n\n  const handleIncrement = () => {\n    if (disabled) return\n\n    const currentValue = Number(value) || 0\n    const newValue = currentValue + step\n\n    if (max !== undefined && newValue > max) return\n\n    triggerChange(newValue)\n  }\n\n  const handleDecrement = () => {\n    if (disabled) return\n\n    const currentValue = Number(value) || 0\n    const newValue = currentValue - step\n\n    if (min !== undefined && newValue < min) return\n\n    triggerChange(newValue)\n  }\n\n  const handleReset = () => {\n    if (disabled || defaultValue === undefined) return\n    triggerChange(Number(defaultValue))\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'ArrowUp') {\n      e.preventDefault()\n      handleIncrement()\n    }\n    if (e.key === 'ArrowDown') {\n      e.preventDefault()\n      handleDecrement()\n    }\n  }\n\n  const isValueDifferentFromDefault = defaultValue !== undefined && Number(value) !== Number(defaultValue)\n\n  const numberControls = (\n    <div className='flex gap-0.5 p-0.5'>\n      <div className='flex gap-0.5'>\n        <Button\n          variant={'link'}\n          className='size-8 p-0'\n          onClick={handleIncrement}\n          disabled={disabled || (max !== undefined && Number(value) >= max)}\n          aria-label='Increment'\n        >\n          <IconChevronUp size='1rem' />\n        </Button>\n        <Button\n          variant={'link'}\n          className='size-8 p-0'\n          onClick={handleDecrement}\n          disabled={disabled || (min !== undefined && Number(value) <= min)}\n          aria-label='Decrement'\n        >\n          <IconChevronDown size='1rem' />\n        </Button>\n      </div>\n      {defaultValue !== undefined && (\n        <Button\n          variant={'link'}\n          className='size-8 p-0'\n          onClick={handleReset}\n          disabled={disabled || Number(value) === Number(defaultValue)}\n          aria-label='Reset to default'\n        >\n          <IconRestore size='1rem' />\n        </Button>\n      )}\n    </div>\n  )\n\n  if (hideControls) {\n    return (\n      <Input\n        type='number'\n        className={className}\n        onChange={onChange}\n        disabled={disabled}\n        value={value}\n        min={min}\n        max={max}\n        step={step}\n        defaultValue={defaultValue}\n        inputSize={inputSize}\n        {...props}\n      />\n    )\n  }\n\n  return (\n    <InputGroup className={className} data-disabled={disabled}>\n      <InputGroupInput\n        type='number'\n        onKeyDown={handleKeyDown}\n        onChange={onChange}\n        disabled={disabled}\n        value={value}\n        min={min}\n        max={max}\n        step={step}\n        defaultValue={defaultValue}\n        {...props}\n      />\n      <InputGroupAddon align='inline-end'>\n        <Popover>\n          <PopoverTrigger asChild>\n            <InputGroupButton size='icon-xs' variant='ghost' disabled={disabled}>\n              {isValueDifferentFromDefault ? <IconAdjustmentsCog className='text-ac' /> : <IconAdjustments />}\n            </InputGroupButton>\n          </PopoverTrigger>\n          <PopoverContent className='w-fit p-0' side='top'>\n            {numberControls}\n          </PopoverContent>\n        </Popover>\n      </InputGroupAddon>\n    </InputGroup>\n  )\n}\n\nexport { InputNumber }\n",
      "type": "registry:component"
    }
  ]
}