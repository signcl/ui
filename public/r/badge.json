{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge",
  "type": "registry:component",
  "title": "Badge",
  "description": "Badge component",
  "files": [
    {
      "path": "components/ui/badge.tsx",
      "content": "import { Slot, Slottable } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport type { HTMLAttributes } from 'react'\n\nimport { cn } from '@/lib/cn'\n\nconst badgeVariantsConfig = {\n  size: {\n    default: 'text-xs px-2.5 py-0.5 leading-tight',\n    lg: 'text-sm px-3 py-0.5 leading-tight',\n    sm: 'text-[10px] px-1.5 py-[0.1rem] leading-none',\n  },\n  variant: {\n    default: '',\n    solid: '',\n    // TODO: Implement gradient variant\n    gradient: '',\n    dot: 'relative',\n  },\n  tint: {\n    default: 'bg-gray-500/10 text-gray-500',\n    accent: 'bg-ac/10 text-ac',\n    red: 'bg-red-500/10 text-red-500',\n    orange: 'bg-orange-500/10 text-orange-500',\n    amber: 'bg-amber-500/10 text-amber-500',\n    yellow: 'bg-yellow-500/10 text-yellow-500',\n    lime: 'bg-lime-500/10 text-lime-500',\n    green: 'bg-green-500/10 text-green-500',\n    emerald: 'bg-emerald-500/10 text-emerald-500',\n    teal: 'bg-teal-500/10 text-teal-500',\n    cyan: 'bg-cyan-500/10 text-cyan-500',\n    sky: 'bg-sky-500/10 text-sky-500',\n    blue: 'bg-blue-500/10 text-blue-500',\n    indigo: 'bg-indigo-500/10 text-indigo-500',\n    violet: 'bg-violet-500/10 text-violet-500',\n    purple: 'bg-purple-500/10 text-purple-500',\n    fuchsia: 'bg-fuchsia-500/10 text-fuchsia-500',\n    pink: 'bg-pink-500/10 text-pink-500',\n    rose: 'bg-rose-500/10 text-rose-500',\n    dark: 'bg-fg/10 text-fg',\n    white: 'bg-white/10 text-white',\n    black: 'bg-black/10 text-black',\n  },\n  radius: {\n    default: 'rounded-full',\n    lg: 'rounded-lg',\n    md: 'rounded-md',\n    sm: 'rounded-xs',\n    none: 'rounded-none',\n  },\n  border: {\n    default: 'border',\n    none: 'border-transparent',\n  },\n}\n\nconst dotVariants = cva('absolute top-1/2 -translate-y-1/2 rounded-full', {\n  variants: {\n    size: {\n      default: 'size-2 left-1.5',\n      lg: 'size-2 left-1.5',\n      sm: 'size-1.5 left-1',\n    },\n    tint: {\n      default: 'bg-gray-500',\n      accent: 'bg-ac',\n      red: 'bg-red-500',\n      orange: 'bg-orange-500',\n      amber: 'bg-amber-500',\n      yellow: 'bg-yellow-500',\n      lime: 'bg-lime-500',\n      green: 'bg-green-500',\n      emerald: 'bg-emerald-500',\n      teal: 'bg-teal-500',\n      cyan: 'bg-cyan-500',\n      sky: 'bg-sky-500',\n      blue: 'bg-blue-500',\n      indigo: 'bg-indigo-500',\n      violet: 'bg-violet-500',\n      purple: 'bg-purple-500',\n      fuchsia: 'bg-fuchsia-500',\n      pink: 'bg-pink-500',\n      rose: 'bg-rose-500',\n      dark: 'bg-fg',\n      white: 'bg-white',\n      black: 'bg-black',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n    tint: 'default',\n  },\n})\n\nconst badgeVariants = cva(\n  'inline-flex items-center uppercase justify-center rounded-full border border-solid border-current font-medium',\n  {\n    variants: badgeVariantsConfig,\n    compoundVariants: [\n      { variant: 'solid', tint: 'default', className: 'bg-gray-500 border-gray-500 text-bg' },\n      { variant: 'solid', tint: 'accent', className: 'bg-ac border-ac text-bg' },\n      { variant: 'solid', tint: 'red', className: 'bg-red-500 border-red-500 text-bg' },\n      { variant: 'solid', tint: 'orange', className: 'bg-orange-500 border-orange-500 text-bg' },\n      { variant: 'solid', tint: 'amber', className: 'bg-amber-500 border-amber-500 text-bg' },\n      { variant: 'solid', tint: 'yellow', className: 'bg-yellow-500 border-yellow-500 text-bg' },\n      { variant: 'solid', tint: 'lime', className: 'bg-lime-500 border-lime-500 text-bg' },\n      { variant: 'solid', tint: 'green', className: 'bg-green-500 border-green-500 text-bg' },\n      { variant: 'solid', tint: 'emerald', className: 'bg-emerald-500 border-emerald-500 text-bg' },\n      { variant: 'solid', tint: 'teal', className: 'bg-teal-500 border-teal-500 text-bg' },\n      { variant: 'solid', tint: 'cyan', className: 'bg-cyan-500 border-cyan-500 text-bg' },\n      { variant: 'solid', tint: 'sky', className: 'bg-sky-500 border-sky-500 text-bg' },\n      { variant: 'solid', tint: 'blue', className: 'bg-blue-500 border-blue-500 text-bg' },\n      { variant: 'solid', tint: 'indigo', className: 'bg-indigo-500 border-indigo-500 text-bg' },\n      { variant: 'solid', tint: 'violet', className: 'bg-violet-500 border-violet-500 text-bg' },\n      { variant: 'solid', tint: 'purple', className: 'bg-purple-500 border-purple-500 text-bg' },\n      { variant: 'solid', tint: 'fuchsia', className: 'bg-fuchsia-500 border-fuchsia-500 text-bg' },\n      { variant: 'solid', tint: 'pink', className: 'bg-pink-500 border-pink-500 text-bg' },\n      { variant: 'solid', tint: 'rose', className: 'bg-rose-500 border-rose-500 text-bg' },\n      { variant: 'solid', tint: 'dark', className: 'bg-fg border-fg text-bg' },\n      { variant: 'solid', tint: 'white', className: 'bg-white border-white text-black' },\n      { variant: 'solid', tint: 'black', className: 'bg-black border-black text-white' },\n\n      // Dot variant padding adjustments\n      { variant: 'dot', size: 'default', className: 'pl-[1.125rem]' },\n      { variant: 'dot', size: 'sm', className: 'pl-[0.85rem]' },\n      { variant: 'dot', size: 'lg', className: 'pl-5' },\n    ],\n    defaultVariants: {\n      size: 'default',\n      variant: 'default',\n      tint: 'default',\n      radius: 'default',\n      border: 'default',\n    },\n  }\n)\n\nexport interface BadgeProps extends HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {\n  /**\n   * @link https://www.radix-ui.com/primitives/docs/utilities/slot\n   */\n  asChild?: boolean\n}\n\nfunction Badge({\n  size,\n  className,\n  asChild = false,\n  tint = 'default',\n  variant,\n  radius,\n  border,\n  children,\n  ...props\n}: BadgeProps) {\n  const Comp = asChild ? Slot : 'div'\n\n  return (\n    <Comp\n      data-slot='badge'\n      className={cn(badgeVariants({ size, variant, tint, radius, border }), className)}\n      {...props}\n    >\n      {variant === 'dot' && <span className={dotVariants({ size, tint })} />}\n      <Slottable>{children}</Slottable>\n    </Comp>\n  )\n}\n\nexport { Badge, badgeVariants, badgeVariantsConfig, dotVariants }\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ]
}