{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "color-slider",
  "type": "registry:component",
  "title": "Color Slider",
  "description": "Color slider component",
  "files": [
    {
      "path": "components/ui/color-slider.tsx",
      "content": "import {\n  ColorSlider as AriaColorSlider,\n  type ColorSliderProps as AriaColorSliderProps,\n  SliderOutput,\n  SliderTrack,\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { composeTailwindRenderProps } from '@/utils'\nimport { ColorThumb } from './color-thumb'\nimport { Label } from './field'\n\nconst trackStyles = tv({\n  base: 'group col-span-2 orientation-horizontal:h-6 rounded-lg',\n  variants: {\n    orientation: {\n      horizontal: 'w-full h-6',\n      vertical: 'w-6 h-56 ml-[50%] -translate-x-[50%]',\n    },\n    isDisabled: {\n      true: 'bg-gray-300 dark:bg-zinc-800 forced-colors:bg-[GrayText]',\n    },\n  },\n})\n\ninterface ColorSliderProps extends AriaColorSliderProps {\n  label?: string\n}\n\nexport function ColorSlider({ label, ...props }: ColorSliderProps) {\n  return (\n    <AriaColorSlider\n      {...props}\n      className={composeTailwindRenderProps(\n        props.className,\n        'orientation-horizontal:grid orientation-vertical:flex orientation-horizontal:w-56 grid-cols-[1fr_auto] flex-col items-center gap-2'\n      )}\n    >\n      <Label>{label}</Label>\n      <SliderOutput className='orientation-vertical:hidden text-sm font-medium text-gray-500 dark:text-zinc-400' />\n      <SliderTrack\n        className={trackStyles}\n        style={({ defaultStyle, isDisabled }) => ({\n          ...defaultStyle,\n          background: isDisabled\n            ? undefined\n            : `${defaultStyle.background}, repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`,\n        })}\n      >\n        <ColorThumb />\n      </SliderTrack>\n    </AriaColorSlider>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ]
}