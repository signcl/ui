{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:component",
  "title": "Accordion",
  "description": "Accordion component",
  "files": [
    {
      "path": "components/ui/accordion.tsx",
      "content": "'use client'\n\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { IconChevronDown } from '@tabler/icons-react'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/cn'\n\ntype AccordionVariant = 'outline' | 'separated'\n\nconst accordionVariants = cva('', {\n  variants: {\n    variant: {\n      outline: 'divide-y rounded-md border w-full',\n      separated: 'space-y-3',\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n  },\n})\n\nconst accordionItemVariants = cva('', {\n  variants: {\n    variant: {\n      outline: '',\n      separated: [\n        'rounded-md border border-transparent bg-fg/5 transition-[background-color] duration-300',\n        'data-[state=open]:border-fg/30',\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n  },\n})\n\nexport const Accordion = ({\n  className,\n  variant = 'outline',\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root> & VariantProps<typeof accordionVariants>) => (\n  <AccordionPrimitive.Root data-slot='accordion' className={cn(accordionVariants({ variant }), className)} {...props} />\n)\nAccordion.displayName = 'Accordion'\n\ninterface AccordionItemProps\n  extends React.ComponentProps<typeof AccordionPrimitive.Item>,\n    VariantProps<typeof accordionItemVariants> {}\n\nexport function AccordionItem({ className, variant = 'outline', ...props }: AccordionItemProps) {\n  return (\n    <AccordionPrimitive.Item\n      className={cn(\n        accordionItemVariants({ variant }),\n        variant === 'separated' && 'data-[state=open]:bg-transparent',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport function AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className='flex'>\n      <AccordionPrimitive.Trigger\n        data-slot='accordion-trigger'\n        className={cn(\n          'flex w-full items-center justify-between gap-x-3 p-3 text-left rounded',\n          'data-[state=open]:from-fg/5 data-[state=open]:to-fg/0 data-[state=open]:bg-linear-to-b [&[data-state=open]>svg]:rotate-180',\n          'focus-ring',\n          className\n        )}\n        {...props}\n      >\n        <div className='font-medium'>{children}</div>\n        <IconChevronDown className='size-4 transition-transform duration-200' />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nexport function AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot='accordion-content'\n      className={cn(\n        'overflow-hidden transition-[height]',\n        'data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down',\n        className\n      )}\n      {...props}\n    >\n      <div className='p-3 pt-0'>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\ntype AccordionRootProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root>\n\ninterface AccordionSingletonProps extends Omit<AccordionRootProps, 'type' | 'value' | 'onValueChange'> {\n  items: {\n    id: string | number\n    label: React.ReactNode\n    content: React.ReactNode\n  }[]\n  variant?: AccordionVariant\n  itemProps?: Partial<React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>>\n  defaultValue?: string\n}\n\nexport function AccordionSingleton({\n  items,\n  variant = 'outline',\n  className,\n  itemProps,\n  defaultValue,\n  ...props\n}: AccordionSingletonProps) {\n  const [value, setValue] = React.useState<string | undefined>(defaultValue)\n\n  return (\n    <AccordionPrimitive.Root\n      data-slot='accordion'\n      type='single'\n      collapsible\n      value={value}\n      onValueChange={setValue}\n      className={cn(accordionVariants({ variant }), className)}\n      {...props}\n    >\n      {items.map(item => (\n        <AccordionPrimitive.Item\n          key={item.id}\n          value={String(item.id)}\n          className={cn(\n            accordionItemVariants({ variant }),\n            variant === 'separated' && 'data-[state=open]:bg-transparent'\n          )}\n          {...itemProps}\n        >\n          <AccordionTrigger>{item.label}</AccordionTrigger>\n          <AccordionContent>{item.content}</AccordionContent>\n        </AccordionPrimitive.Item>\n      ))}\n    </AccordionPrimitive.Root>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ]
}