{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:component",
  "title": "Tooltip",
  "description": "Tooltip component",
  "files": [
    {
      "path": "components/ui/tooltip.tsx",
      "content": "'use client'\n\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\n\nimport { cn } from '@/lib/cn'\n\nfunction TooltipProvider({ delayDuration = 0, ...props }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return <TooltipPrimitive.Provider data-slot='tooltip-provider' delayDuration={delayDuration} {...props} />\n}\n\n// The usage of the shadcn original Tooltip is too crumbsome\n// I remove its original Tooltip to TooltipRoot\n// Use the Tooltip wrapper below\nfunction TooltipRoot({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot='tooltip' {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot='tooltip-trigger' {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 4,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        hideWhenDetached\n        collisionPadding={5}\n        sideOffset={sideOffset}\n        data-slot='tooltip-content'\n        className={cn(\n          'floating text-fg w-fit max-w-[400px] rounded-md border px-3 py-1.5 text-sm',\n          'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\n          'origin-(--radix-tooltip-content-transform-origin)',\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {/* We're using background blur which does not work for the arrow */}\n        {/* <TooltipPrimitive.Arrow\n          className={cn('bg-bg fill-bg z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]')}\n        /> */}\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\ninterface TooltipProps {\n  children: React.ReactNode\n  label: React.ReactNode\n  triggerOptions?: React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Trigger>\n  contentOptions?: React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n}\n\n/**\n * A simpler version of the original shadcn Tooltip\n */\nfunction Tooltip({ children, label, triggerOptions, contentOptions }: TooltipProps) {\n  const { className: triggerClassName, ...triggerOps } = triggerOptions || {}\n  const { className: contentClassName, ...contentOps } = contentOptions || {}\n\n  return (\n    <TooltipPrimitive.Root data-slot='tooltip' disableHoverableContent>\n      <TooltipTrigger\n        // asChild by default\n        asChild\n        className={cn('focus-ring flex items-center', triggerClassName)}\n        {...triggerOps}\n      >\n        {children}\n      </TooltipTrigger>\n      <TooltipContent className={cn(contentClassName)} {...contentOps}>\n        {label}\n      </TooltipContent>\n    </TooltipPrimitive.Root>\n  )\n}\n\nexport { TooltipRoot, TooltipTrigger, TooltipContent, TooltipProvider, Tooltip }\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ]
}