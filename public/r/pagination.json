{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pagination",
  "type": "registry:component",
  "title": "Pagination",
  "description": "Pagination component",
  "registryDependencies": [
    "select"
  ],
  "files": [
    {
      "path": "components/ui/pagination.tsx",
      "content": "'use client'\n\nimport { IconChevronLeft, IconChevronRight, IconDots } from '@tabler/icons-react'\nimport { type ComponentProps, Fragment } from 'react'\n\nimport { cn } from '@/lib/cn'\n\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './select'\n\nfunction PaginationPrimitive({ className, ...props }: ComponentProps<'nav'>) {\n  return <nav aria-label='pagination' data-slot='pagination' className={cn('flex', className)} {...props} />\n}\n\nfunction PaginationContent({ className, ...props }: ComponentProps<'div'>) {\n  return <div data-slot='pagination-content' className={cn('flex flex-row items-center gap-1', className)} {...props} />\n}\n\nfunction PaginationItem({ className, ...props }: ComponentProps<'div'>) {\n  return <div data-slot='pagination-item' className={cn('', className)} {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & ComponentProps<'button'>\n\nfunction PaginationLink({ className, isActive, ...props }: PaginationLinkProps) {\n  return (\n    <button\n      data-slot='pagination-link'\n      aria-current={isActive ? 'page' : undefined}\n      className={cn('focus-ring rounded-sm disabled:cursor-not-allowed disabled:opacity-50', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({ className, ...props }: ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      data-slot='pagination-previous'\n      aria-label='访问上一页'\n      className={cn('flex items-center gap-1 px-1.5 py-1', props.disabled && 'cursor-not-allowed', className)}\n      {...props}\n    >\n      <IconChevronLeft className='size-4' />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({ className, ...props }: ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      data-slot='pagination-next'\n      aria-label='访问下一页'\n      className={cn('flex items-center gap-1 px-1.5 py-1', props.disabled && 'cursor-not-allowed', className)}\n      {...props}\n    >\n      <IconChevronRight className='size-4' />\n    </PaginationLink>\n  )\n}\n\ntype PaginationEllipsisProps = {\n  pages?: number[]\n  onPageChange?: (page: number) => void\n  disabled?: boolean\n} & ComponentProps<'span'>\n\nfunction PaginationEllipsis({ className, pages, onPageChange, disabled, ...props }: PaginationEllipsisProps) {\n  // If no hidden pages, just show the dots\n  if (!pages || pages.length === 0) {\n    return (\n      <span\n        data-slot='pagination-ellipsis'\n        aria-hidden\n        className={cn('flex items-center justify-center px-2 py-1', className)}\n        {...props}\n      >\n        <IconDots className='size-4' />\n        <span className='sr-only'>更多页面</span>\n      </span>\n    )\n  }\n\n  // When there are hidden pages, show a select\n  return (\n    <Select\n      onValueChange={value => {\n        if (onPageChange) {\n          onPageChange(parseInt(value, 10))\n        }\n      }}\n      disabled={disabled}\n    >\n      <SelectTrigger className={'border-none [&>span]:flex'} withoutIcon>\n        <SelectValue aria-label='更多页面' placeholder={<IconDots className='size-4' />}>\n          <IconDots className='size-4' />\n        </SelectValue>\n      </SelectTrigger>\n      <SelectContent>\n        {pages.map(page => (\n          <SelectItem key={page} value={String(page)}>\n            {page}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  )\n}\n\ninterface PaginationProps extends ComponentProps<'nav'> {\n  value: number\n  onPageChange: (page: number) => void\n  total: number\n  disabled?: boolean\n  siblings?: number\n}\n\nfunction Pagination({\n  className,\n  value,\n  onPageChange,\n  total,\n  disabled = false,\n  siblings = 3,\n  ...props\n}: PaginationProps) {\n  // Generate all page numbers\n  const allPages = Array.from({ length: total }, (_, k) => k + 1)\n\n  // Determine which pages to show\n  const visiblePages = allPages.filter(\n    page => page === 1 || page === total || (page >= value - siblings && page <= value + siblings)\n  )\n\n  // Render the pagination\n  return (\n    <PaginationPrimitive className={className} {...props}>\n      <PaginationContent>\n        <PaginationItem>\n          <PaginationPrevious onClick={() => onPageChange(value - 1)} disabled={disabled || value === 1} />\n        </PaginationItem>\n\n        {visiblePages.map((page, index, arr) => {\n          // Check if there's a gap that needs an ellipsis\n          if (index > 0) {\n            const prevPage = arr[index - 1]\n            if (prevPage !== undefined && page !== prevPage + 1) {\n              // Get the list of hidden pages in this gap\n              const hiddenPages = allPages.filter(p => p > prevPage && p < page)\n\n              return (\n                <Fragment key={`ellipsis-${index}-${page}`}>\n                  <PaginationItem>\n                    <PaginationEllipsis pages={hiddenPages} onPageChange={onPageChange} disabled={disabled} />\n                  </PaginationItem>\n                  <PaginationItem key={`page-${page}`}>\n                    <PaginationLink\n                      isActive={page === value}\n                      onClick={() => onPageChange(page)}\n                      className={cn('px-2 py-1', {\n                        'bg-ac/60 text-bg': page === value,\n                      })}\n                      disabled={disabled}\n                    >\n                      {page}\n                    </PaginationLink>\n                  </PaginationItem>\n                </Fragment>\n              )\n            }\n          }\n\n          return (\n            <PaginationItem key={`page-${page}`}>\n              <PaginationLink\n                isActive={page === value}\n                onClick={() => onPageChange(page)}\n                className={cn('px-2 py-1', {\n                  'bg-ac/60 text-bg': page === value,\n                })}\n                disabled={disabled}\n              >\n                {page}\n              </PaginationLink>\n            </PaginationItem>\n          )\n        })}\n\n        <PaginationItem>\n          <PaginationNext onClick={() => onPageChange(value + 1)} disabled={disabled || value === total} />\n        </PaginationItem>\n      </PaginationContent>\n    </PaginationPrimitive>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationPrimitive,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ]
}