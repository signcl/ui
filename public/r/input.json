{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:component",
  "title": "Input",
  "description": "Input component",
  "registryDependencies": [
    "button",
    "popover"
  ],
  "files": [
    {
      "path": "components/ui/input.tsx",
      "content": "import { IconAdjustments, IconAdjustmentsCog, IconChevronDown, IconChevronUp, IconRestore } from '@tabler/icons-react'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/cn'\n\nimport { Button } from '@/components/ui/button'\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\n\nconst inputVariants = cva(\n  [\n    'flex w-full appearance-none rounded-sm border bg-transparent',\n    'text-fg inset-shadow-input outline-hidden file:border-0 file:bg-transparent file:font-medium file:text-fg placeholder:text-fg/40',\n    'focus-ring hover:focus-visible:border-ac',\n    'disabled:cursor-not-allowed disabled:border-fg/30 disabled:opacity-50 disabled:bg-fg/5',\n    // Hide native spinner buttons\n    '[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none',\n  ],\n  {\n    variants: {\n      inputSize: {\n        sm: 'px-2 py-[calc(0.25rem-1px)] text-xs',\n        md: 'px-2.5 py-[calc(0.25rem-1px)] text-base rounded-md',\n        lg: 'px-3 py-[calc(0.25rem-1px)] text-lg rounded-md',\n      },\n    },\n    defaultVariants: {\n      inputSize: 'md',\n    },\n  }\n)\n\nexport interface InputProps extends React.ComponentProps<'input'>, VariantProps<typeof inputVariants> {\n  /** Custom property for future use */\n  customProp?: string\n  leftSection?: React.ReactNode\n  rightSection?: React.ReactNode\n  /** className for leftSection wrap */\n  leftSectionClassName?: string\n  /** className for rightSection wrap */\n  rightSectionClassName?: string\n  error?: React.ReactNode\n  /** Hide number controls for number inputs */\n  hideControls?: boolean\n  /** Step interval for number inputs */\n  step?: number\n  /** Min value for number inputs */\n  min?: number\n  /** Max value for number inputs */\n  max?: number\n  /** Default value for reset functionality */\n  defaultValue?: number\n}\n\nfunction Input({\n  className,\n  type,\n  leftSection,\n  leftSectionClassName,\n  rightSection,\n  rightSectionClassName,\n  error,\n  inputSize,\n  hideControls,\n  step = 1,\n  min,\n  max,\n  onChange,\n  disabled,\n  value,\n  defaultValue,\n  ...props\n}: InputProps) {\n  const triggerChange = (newValue: number) => {\n    if (disabled) return\n\n    if (onChange) {\n      onChange({\n        target: { value: newValue.toString(), valueAsNumber: newValue },\n        currentTarget: { value: newValue.toString(), valueAsNumber: newValue },\n      } as React.ChangeEvent<HTMLInputElement>)\n    }\n  }\n\n  const handleIncrement = () => {\n    if (disabled) return\n\n    const currentValue = Number(value) || 0\n    const newValue = currentValue + step\n\n    if (max !== undefined && newValue > max) return\n\n    triggerChange(newValue)\n  }\n\n  const handleDecrement = () => {\n    if (disabled) return\n\n    const currentValue = Number(value) || 0\n    const newValue = currentValue - step\n\n    if (min !== undefined && newValue < min) return\n\n    triggerChange(newValue)\n  }\n\n  const handleReset = () => {\n    if (disabled || defaultValue === undefined) return\n    triggerChange(defaultValue)\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (type !== 'number') return\n    if (e.key === 'ArrowUp') {\n      e.preventDefault()\n      handleIncrement()\n    }\n    if (e.key === 'ArrowDown') {\n      e.preventDefault()\n      handleDecrement()\n    }\n  }\n\n  const isValueDifferentFromDefault = defaultValue !== undefined && Number(value) !== defaultValue\n\n  const numberControls = type === 'number' && !hideControls && (\n    <div className='flex gap-0.5 p-0.5'>\n      <div className='flex gap-0.5'>\n        <Button\n          variant={'link'}\n          className='size-8 p-0'\n          onClick={handleIncrement}\n          disabled={disabled || (max !== undefined && Number(value) >= max)}\n          aria-label='Increment'\n        >\n          <IconChevronUp size='1rem' />\n        </Button>\n        <Button\n          variant={'link'}\n          className='size-8 p-0'\n          onClick={handleDecrement}\n          disabled={disabled || (min !== undefined && Number(value) <= min)}\n          aria-label='Decrement'\n        >\n          <IconChevronDown size='1rem' />\n        </Button>\n      </div>\n      {defaultValue !== undefined && (\n        <Button\n          variant={'link'}\n          className='size-8 p-0'\n          onClick={handleReset}\n          disabled={disabled || Number(value) === defaultValue}\n          aria-label='Reset to default'\n        >\n          <IconRestore size='1rem' />\n        </Button>\n      )}\n    </div>\n  )\n\n  const resolvedProps = (inputSize: InputProps['inputSize']) => {\n    switch (inputSize) {\n      case 'sm':\n        return { buttonMargin: 'p-0 mr-1.25', iconSize: '0.75rem' }\n      case 'lg':\n        return { buttonMargin: 'p-0.25 mr-1.5', iconSize: '1.25rem' }\n      default:\n        return { buttonMargin: 'p-0.25 mr-1.5', iconSize: '1rem' }\n    }\n  }\n\n  return (\n    <div className='group/input-wrap'>\n      <div className='group/input relative'>\n        {leftSection ? (\n          <div className={cn('absolute top-0 bottom-0 left-0 flex items-center justify-center', leftSectionClassName)}>\n            {leftSection}\n          </div>\n        ) : null}\n        <input\n          type={type}\n          data-slot='input'\n          className={cn(\n            inputVariants({ inputSize }),\n            error && 'border-rose-500! text-rose-500 focus-visible:ring-rose-500/30',\n            leftSection && 'pl-[2em]',\n            (rightSection || type === 'number') && 'pr-[2em]',\n            className\n          )}\n          onKeyDown={handleKeyDown}\n          onChange={onChange}\n          disabled={disabled}\n          value={value}\n          min={min}\n          max={max}\n          step={step}\n          ref={props.ref}\n          {...props}\n        />\n        {rightSection || (type === 'number' && !hideControls) ? (\n          <div\n            className={cn('absolute top-0 right-0 bottom-0 flex items-center justify-center', rightSectionClassName)}\n          >\n            {rightSection || (\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    size='sm'\n                    variant={'link'}\n                    className={cn(resolvedProps(inputSize).buttonMargin)}\n                    disabled={disabled}\n                  >\n                    {isValueDifferentFromDefault ? (\n                      <IconAdjustmentsCog size={resolvedProps(inputSize).iconSize} className='text-blue-500' />\n                    ) : (\n                      <IconAdjustments size={resolvedProps(inputSize).iconSize} />\n                    )}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className='w-fit p-0' side='top'>\n                  {numberControls}\n                </PopoverContent>\n              </Popover>\n            )}\n          </div>\n        ) : null}\n      </div>\n      {error && typeof error !== 'boolean' ? <div className='text-sm text-rose-500'>{error}</div> : null}\n    </div>\n  )\n}\n\nexport { Input }\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ]
}