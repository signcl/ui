{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:component",
  "title": "Select",
  "description": "Select component",
  "files": [
    {
      "path": "components/ui/select.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { IconChevronCompactDown, IconChevronCompactUp, IconChevronDown } from '@tabler/icons-react'\n\nimport { cn } from '@/lib/cn'\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nexport interface SelectTriggerProps extends React.ComponentProps<typeof SelectPrimitive.Trigger> {\n  withoutIcon?: boolean\n  icon?: React.ReactNode\n}\n\nfunction SelectTrigger({ className, children, withoutIcon, icon, ...props }: SelectTriggerProps) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot='trigger'\n      className={cn(\n        'placeholder:text-fg/60 flex w-full items-center justify-between gap-x-1 rounded-md border bg-transparent px-[.625em] py-[.25em] text-start text-base font-medium disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\n        'focus-ring',\n        className\n      )}\n      {...props}\n    >\n      {children}\n      {!withoutIcon && (\n        <SelectPrimitive.Icon asChild>{icon ? icon : <IconChevronDown className='size-4' />}</SelectPrimitive.Icon>\n      )}\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectScrollUpButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot='scroll-up'\n      className={cn(\n        'absolute top-0 right-0 left-0 z-51 flex h-6 cursor-default items-center justify-center pt-2 pb-4',\n        'hover:from-ac/20 hover:text-ac hover:bg-linear-to-b',\n        className\n      )}\n      {...props}\n    >\n      <IconChevronCompactUp className='size-4' />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot='scroll-down'\n      className={cn(\n        'absolute right-0 bottom-0 left-0 z-51 flex h-6 cursor-default items-center justify-center pt-4 pb-2',\n        'hover:from-ac/20 hover:text-ac hover:bg-linear-to-t',\n        className\n      )}\n      {...props}\n    >\n      <IconChevronCompactDown className='size-4' />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'item-aligned',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot='content'\n        className={cn(\n          'floating text-fg data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative max-h-[350px] min-w-[8rem] overflow-hidden rounded-md',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n          className\n        )}\n        position={position}\n        collisionPadding={5}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'py-1',\n            '[mask-image:linear-gradient(to_bottom,transparent,black_0.3rem,black_calc(100%-0.3rem),transparent)]',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot='label'\n      className={cn('text-fg/60 py-1.5 pr-2 pl-7 text-xs leading-none uppercase', className)}\n      {...props}\n    />\n  )\n}\n\n// Extend SelectItem with a custom props\ninterface SelectItemProps extends React.ComponentProps<typeof SelectPrimitive.Item> {\n  plain?: boolean\n}\n\nfunction SelectItem({ className, children, plain, ...props }: SelectItemProps) {\n  return (\n    <SelectPrimitive.Item\n      data-slot='item'\n      className={cn(\n        'focus:bg-ac/10 focus:text-ac relative flex w-full cursor-default items-start py-1.5 pr-2 text-base outline-hidden select-none',\n        'data-[state=checked]:text-ac data-disabled:pointer-events-none data-disabled:opacity-50 data-[state=checked]:font-medium',\n        plain ? 'pl-2' : 'pl-7',\n        className\n      )}\n      {...props}\n    >\n      {!plain && (\n        <span className='absolute top-2.5 left-2 flex size-4 items-center justify-center'>\n          <SelectPrimitive.ItemIndicator>\n            {/* <Check className='size-4' /> */}\n            <div className='size-1.5 rounded-full bg-current' />\n          </SelectPrimitive.ItemIndicator>\n        </span>\n      )}\n\n      <div className='flex-auto'>\n        <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n      </div>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator data-slot='separator' className={cn('bg-fg/10 -mx-1 my-1 h-px', className)} {...props} />\n  )\n}\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib"
    }
  ]
}