{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox",
  "type": "registry:component",
  "title": "Checkbox",
  "description": "Checkbox component",
  "files": [
    {
      "path": "components/ui/checkbox.tsx",
      "content": "'use client'\n\nimport { IconCheck } from '@tabler/icons-react'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/cn'\n\n/**\n * Checkbox component\n *\n * - Q: Why not using @radix-ui/react-checkbox?\n * - A: @radix-ui/react-checkbox uses button with type=\"button\" and role=\"checkbox\"\n *      which is anti pattern for accessibility.\n */\nfunction Checkbox({ className, onChange, checked, defaultChecked, ...props }: React.ComponentProps<'input'>) {\n  const [isChecked, setIsChecked] = React.useState(checked ?? defaultChecked ?? false)\n\n  // Keep latest onChange in ref (similar to useEffectEvent)\n  const onChangeRef = React.useRef(onChange)\n  React.useEffect(() => {\n    onChangeRef.current = onChange\n  })\n\n  // Sync with controlled checked prop\n  React.useEffect(() => {\n    if (checked !== undefined) {\n      setIsChecked(checked)\n    }\n  }, [checked])\n\n  // Stable event handler that always calls latest onChange\n  const handleChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsChecked(e.target.checked)\n    onChangeRef.current?.(e)\n  }, [])\n\n  return (\n    <div className='relative inline-flex [&+label]:pb-0'>\n      <input\n        type='checkbox'\n        data-slot='checkbox'\n        className={cn(\n          'peer bg-bg/10 size-4 cursor-pointer appearance-none rounded-sm border',\n          'disabled:cursor-not-allowed disabled:opacity-50',\n          'checked:border-ac checked:bg-ac',\n          'focus-ring',\n          className\n        )}\n        onChange={handleChange}\n        checked={checked}\n        defaultChecked={defaultChecked}\n        aria-checked={isChecked}\n        data-state={isChecked ? 'checked' : 'unchecked'}\n        {...props}\n      />\n      <div\n        data-slot='checkbox-indicator'\n        className='text-bg pointer-events-none absolute flex size-4 items-center justify-center opacity-0 peer-checked:opacity-100'\n      >\n        <IconCheck className='size-3.5' />\n      </div>\n    </div>\n  )\n}\n\nexport { Checkbox }\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ]
}