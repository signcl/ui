{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slider",
  "type": "registry:component",
  "title": "Slider",
  "description": "Slider component",
  "files": [
    {
      "path": "components/ui/slider.tsx",
      "content": "'use client'\n\nimport * as SliderPrimitive from '@radix-ui/react-slider'\nimport { IconRestore } from '@tabler/icons-react'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/cn'\n\ninterface Mark {\n  value: number\n  label: string\n}\n\ninterface SliderProps extends React.ComponentProps<typeof SliderPrimitive.Root> {\n  /** Default value for reset functionality */\n  defaultValues?: Mark[]\n  marks?: Mark[]\n  trackProps?: React.ComponentPropsWithoutRef<typeof SliderPrimitive.Track>\n  rangeProps?: React.ComponentPropsWithoutRef<typeof SliderPrimitive.Range>\n}\n\nfunction Slider({\n  className,\n  marks,\n  defaultValues,\n  min,\n  max,\n  value,\n  onValueChange,\n  trackProps,\n  rangeProps,\n  ...props\n}: SliderProps) {\n  const [hoveredThumb, setHoveredThumb] = React.useState<number | null>(null)\n\n  const { className: trackClassName, ...restTrackProps } = trackProps || {}\n  const { className: rangeClassName, ...restRangeProps } = rangeProps || {}\n  // Calculate mark position as a percentage\n  const getMarkPosition = (value: number) => {\n    if (typeof min !== 'number' || typeof max !== 'number') return '0%'\n    return `${((value - min) / (max - min)) * 100}%`\n  }\n\n  // Check if a mark is within the selected range\n  const isMarkInRange = (mark: number) => {\n    if (Array.isArray(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number') {\n      const [start, end] = value\n      return mark >= start && mark <= end\n    }\n    if (Array.isArray(value) && value.length === 1 && typeof value[0] === 'number') {\n      return mark <= value[0]\n    }\n    return false\n  }\n\n  // Handle label click\n  const handleLabelClick = (clickedValue: number) => {\n    if (!onValueChange) return\n\n    // Handle range slider (array of 2 values)\n    if (Array.isArray(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number') {\n      const [start, end] = value\n      // Determine which thumb to move based on which is closer to the clicked value\n      const distanceToStart = Math.abs(clickedValue - start)\n      const distanceToEnd = Math.abs(clickedValue - end)\n\n      if (distanceToStart <= distanceToEnd) {\n        onValueChange([clickedValue, end])\n      } else {\n        onValueChange([start, clickedValue])\n      }\n    }\n    // Handle single value slider\n    else if (typeof onValueChange === 'function') {\n      onValueChange([clickedValue])\n    }\n  }\n\n  return (\n    <div className={cn('relative flex w-full flex-col', (marks || defaultValues) && 'pb-4')}>\n      <SliderPrimitive.Root\n        data-slot='slider'\n        min={min}\n        max={max}\n        value={value}\n        onValueChange={onValueChange}\n        className={cn(\n          'relative my-2 flex w-full touch-none items-center select-none',\n          props.disabled && 'pointer-events-none opacity-60',\n          className\n        )}\n        {...props}\n      >\n        <SliderPrimitive.Track\n          className={cn('bg-fg/10 relative h-2 w-full grow overflow-hidden rounded-full', trackClassName)}\n          {...restTrackProps}\n        >\n          <SliderPrimitive.Range className={cn('bg-ac absolute h-full', rangeClassName)} {...restRangeProps} />\n\n          {/* Render marks */}\n          {marks ? (\n            <div className='pointer-events-none absolute top-1/2 right-2 left-2 -translate-y-1/2'>\n              {marks.map(({ value: mark }, idx) => (\n                <div\n                  key={idx}\n                  className={cn(\n                    'absolute top-1/2 size-1 -translate-x-1/2 -translate-y-1/2 rounded-full',\n                    isMarkInRange(mark) ? 'bg-bg' : 'bg-fg/40'\n                  )}\n                  style={{ left: getMarkPosition(mark) }}\n                />\n              ))}\n            </div>\n          ) : null}\n\n          {/* Render default values */}\n          {defaultValues ? (\n            <div className='pointer-events-none absolute top-1/2 right-2 left-2 -translate-y-1/2'>\n              {defaultValues.map(({ value: mark }, idx) => (\n                <div\n                  key={idx}\n                  className={cn(\n                    'absolute top-1/2 h-1.5 w-[2px] -translate-x-1/2 -translate-y-1/2 rounded-[1px]',\n                    isMarkInRange(mark) ? 'bg-bg' : 'bg-fg/40'\n                  )}\n                  style={{ left: getMarkPosition(mark) }}\n                />\n              ))}\n            </div>\n          ) : null}\n        </SliderPrimitive.Track>\n\n        {/* Render thumbs with tooltips */}\n        {Array.isArray(value) &&\n          value.map((thumbValue, idx) => (\n            <SliderPrimitive.Thumb\n              key={idx}\n              onMouseEnter={() => setHoveredThumb(idx)}\n              onMouseLeave={() => setHoveredThumb(null)}\n              className='border-ac bg-bg ring-offset-bg focus-ring block size-4 cursor-pointer rounded-full border-[.325rem] transition-colors disabled:pointer-events-none disabled:opacity-50'\n            >\n              {/* NOTE: nested backdrop filter blur does not work */}\n              <div\n                className={cn(\n                  'floating pointer-events-none absolute bottom-6 left-1/2 -translate-x-1/2 rounded-sm px-2 py-1.5 opacity-0 transition-opacity',\n                  hoveredThumb === idx && 'opacity-100 duration-0'\n                )}\n              >\n                {thumbValue}\n              </div>\n            </SliderPrimitive.Thumb>\n          ))}\n      </SliderPrimitive.Root>\n\n      {/* Render labels */}\n      {marks && (\n        <div\n          className={cn(\n            'absolute top-7 right-2 left-2 -mt-1.5 mb-2',\n            props.disabled && 'pointer-events-none opacity-60'\n          )}\n        >\n          {marks.map(({ value: mark, label }, idx) => (\n            <button\n              key={idx}\n              type='button'\n              className={cn(\n                'hover:text-fg absolute flex cursor-pointer text-xs text-nowrap select-none',\n                isMarkInRange(mark) ? 'text-fg' : 'text-fg/40'\n              )}\n              style={{\n                left: getMarkPosition(mark),\n                translate: '-50%',\n              }}\n              onClick={() => handleLabelClick(mark)}\n            >\n              {label}\n            </button>\n          ))}\n        </div>\n      )}\n\n      {/* Render default values */}\n      {defaultValues && (\n        <div\n          className={cn(\n            'absolute top-7 right-2 left-2 -mt-1.5 mb-2',\n            props.disabled && 'pointer-events-none opacity-60'\n          )}\n        >\n          {defaultValues.map(({ value: mark }, idx) => (\n            <button\n              key={idx}\n              type='button'\n              className={cn(\n                'hover:text-fg absolute flex cursor-pointer text-xs text-nowrap select-none',\n                value && mark !== value[0] ? 'text-fg' : 'text-fg/40'\n              )}\n              style={{\n                left: getMarkPosition(mark),\n                translate: '-50%',\n              }}\n              onClick={() => handleLabelClick(mark)}\n            >\n              {value && mark !== value[0] ? <IconRestore className='size-4' /> : value}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport { Slider }\nexport type { Mark }\n",
      "type": "registry:component"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ]
}